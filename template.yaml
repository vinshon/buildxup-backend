AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BuildXup Backend API

Globals:
  Function:
    # Timeout: 60
    # MemorySize: 1024
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: !Ref NodeEnv
        DB_HOST: !Ref DBHost
        DB_NAME: !Ref DBName
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Ref DBPassword
        DB_PORT: !Ref DBPort
        JWT_SECRET: !Ref JWTSecret
        DATABASE_URL: !Sub "postgresql://${DBUser}:${DBPassword}@${DBHost}:${DBPort}/${DBName}?schema=public"

Parameters:
  NodeEnv:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
  DBHost:
    Type: String
    Default: host.docker.internal
  DBName:
    Type: String
    Default: buildxup
  DBUser:
    Type: String
    Default: postgres
  DBPassword:
    Type: String
    Default: postgres
  DBPort:
    Type: String
    Default: '5432'
  JWTSecret:
    Type: String
    Default: your_jwt_secret_key

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref NodeEnv
      BinaryMediaTypes:
        - "*/*"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"


  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: module_auth/handler.handler
      Events:
        Signup:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
        VerifyOTP:
          Type: Api
          Properties:
            Path: /auth/verify-otp
            Method: post
        VerifyLogin:
          Type: Api
          Properties:
            Path: /auth/verify-login
            Method: post
        TempOTP:
          Type: Api
          Properties:
            Path: /auth/temp-otp
            Method: post


  ProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: module_project/handler.handler
      Events:
        CreateProject:
          Type: Api
          Properties:
            Path: /projects
            Method: post
        GetProjects:
          Type: Api
          Properties:
            Path: /projects
            Method: get
        GetProjectById:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: get
        UpdateProject:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: put
        DeleteProject:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: delete
        GetProjectOverview:
          Type: Api
          Properties:
            Path: /projects/overview
            Method: get


  TaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: module_task/handler.handler
      Events:
        CreateTask:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
        GetTasks:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
        GetTaskById:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: get
        UpdateTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: put
        DeleteTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: delete


  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: ping.handler
      Events:
        Ping:
          Type: Api
          Properties:
            Path: /server/ping
            Method: get
        PingDb:
          Type: Api
          Properties:
            Path: /server/ping-db
            Method: get


Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${NodeEnv}/