// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model temp_otp {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  phone       String?  @unique
  otp         String
  is_verified Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime @default(dbgenerated("NOW() + INTERVAL '24 hours'"))

  @@index([email])
  @@index([phone])
  @@index([expiresAt])
}

model user {
  id                String         @id @default(uuid())
  first_name        String
  last_name         String?
  email             String         @unique
  phone             String?        @unique
  profile           String?
  token             String?
  refresh_token     String?
  password          String
  verify_otp        Boolean        @default(false)
  is_phone_verified Boolean        @default(false)
  is_email_verified Boolean        @default(false)
  role              String         @default("admin")
  is_active         Boolean        @default(true)
  is_block          Boolean        @default(false)
  status            String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user_preference   Json?
  companies         user_company[] // Many-to-many relation with companies
}

model company {
  id          String         @id @default(uuid())
  name        String // Company name
  description String? // Optional company description
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       user_company[] // Many-to-many relation with users
  projects    project[] // One-to-many relation with projects
}

// Junction table for many-to-many relationship between users and companies
model user_company {
  user_id    String
  company_id String
  role       String    @default("admin")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       user      @relation(fields: [user_id], references: [id])
  company    company   @relation(fields: [company_id], references: [id])

  @@id([user_id, company_id])
}

model project {
  id                        String    @id @default(uuid())
  project_name              String
  project_description       String?   // Optional project description
  project_location          String
  project_vaildation_amount Decimal   @db.Decimal(10, 2)
  project_spent_amount      Decimal   @db.Decimal(10, 2)
  project_start_date        DateTime
  project_end_date          DateTime
  project_image             String?   // Optional project image field
  project_status            String    @default("in_progress") // Project status field
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt
  deleted_at                DateTime?
  is_deleted                Boolean   @default(false)

  // Relationships
  company_id     String
  company        company         @relation(fields: [company_id], references: [id])
  project_images project_image[]
  tasks          task[]

  @@index([company_id])
  @@index([is_deleted])
  @@index([created_at])
}

model project_image {
  id         String   @id @default(uuid())
  task_title String
  task_date  DateTime
  image_url  String
  created_at DateTime @default(now())

  // Relationships
  project_id String
  project    project @relation(fields: [project_id], references: [id])

  @@index([project_id])
  @@index([task_date])
}

model task {
  id               String   @id @default(uuid())
  task_name        String
  task_description String?
  project_id       String
  project          project  @relation(fields: [project_id], references: [id])
  due_date         DateTime
  status           String   @default("pending")
  assigned_to      String?
  task_image       String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  is_deleted       Boolean  @default(false)

  // Back-relations for new models
  attendances      task_employee_attendance[]
  miscellaneous    task_miscellaneous[]
  images           task_image[]
  notes            task_note[]

  @@index([project_id])
  @@index([status])
  @@index([created_at])
}

model employee {
  id             String   @id @default(uuid())
  name           String
  role           String
  phone          String?
  aadhar_number  String?  @unique
  basic_salary   Decimal  @db.Decimal(10, 2)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  attendances    task_employee_attendance[]
  is_deleted     Boolean   @default(false)
  deleted_at     DateTime?
}

model task_employee_attendance {
  id              String   @id @default(uuid())
  task_id         String
  employee_id     String
  salary_for_task Decimal  @db.Decimal(10, 2)
  status          attendance_status
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  employee        employee @relation(fields: [employee_id], references: [id])
  task            task     @relation(fields: [task_id], references: [id])
  is_deleted      Boolean   @default(false)
  deleted_at      DateTime?

  @@index([task_id])
  @@index([employee_id])
}

enum attendance_status {
  present
  half_day
  absent
}

model task_miscellaneous {
  id         String   @id @default(uuid())
  task_id    String
  name       String
  quantity   String
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task       task     @relation(fields: [task_id], references: [id])
  is_deleted Boolean   @default(false)
  deleted_at DateTime?

  @@index([task_id])
}

model task_image {
  id          String   @id @default(uuid())
  task_id     String
  image_url   String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  task        task     @relation(fields: [task_id], references: [id])
  is_deleted  Boolean   @default(false)
  deleted_at  DateTime?

  @@index([task_id])
}

model task_note {
  id         String   @id @default(uuid())
  task_id    String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task       task     @relation(fields: [task_id], references: [id])
  is_deleted Boolean   @default(false)
  deleted_at DateTime?

  @@index([task_id])
}
