// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model temp_otp {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  phone       String?  @unique
  otp         String
  is_verified Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime @default(dbgenerated("NOW() + INTERVAL '24 hours'"))

  @@index([email])
  @@index([phone])
  @@index([expiresAt])
}

model user {
  id                String         @id @default(uuid())
  first_name        String
  last_name         String?
  email             String         @unique
  phone             String?        @unique
  profile           String?
  token             String?
  refresh_token     String?
  password          String
  verify_otp        Boolean        @default(false)
  is_phone_verified Boolean        @default(false)
  is_email_verified Boolean        @default(false)
  role              String         @default("admin")
  is_active         Boolean        @default(true)
  is_block          Boolean        @default(false)
  status            String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user_preference   Json?
  companies         user_company[] // Many-to-many relation with companies
}

model company {
  id          String         @id @default(uuid())
  name        String // Company name
  description String? // Optional company description
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       user_company[] // Many-to-many relation with users
  projects    project[] // One-to-many relation with projects
}

// Junction table for many-to-many relationship between users and companies
model user_company {
  user_id    String
  company_id String
  role       String    @default("admin")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       user      @relation(fields: [user_id], references: [id])
  company    company   @relation(fields: [company_id], references: [id])

  @@id([user_id, company_id])
}

model project {
  id                        String    @id @default(uuid())
  project_name              String
  project_location          String
  project_vaildation_amount Decimal   @db.Decimal(10, 2)
  project_spent_amount      Decimal   @db.Decimal(10, 2)
  project_start_date        DateTime
  project_end_date          DateTime
  project_image             String?   // Optional project image field
  project_status            String    @default("in_progress") // Project status field
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt
  deleted_at                DateTime?
  is_deleted                Boolean   @default(false)

  // Relationships
  company_id     String
  company        company         @relation(fields: [company_id], references: [id])
  project_images project_image[]

  @@index([company_id])
  @@index([is_deleted])
  @@index([created_at])
}

model project_image {
  id         String   @id @default(uuid())
  task_title String
  task_date  DateTime
  image_url  String
  created_at DateTime @default(now())

  // Relationships
  project_id String
  project    project @relation(fields: [project_id], references: [id])

  @@index([project_id])
  @@index([task_date])
}
